{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "1) Example for divide and conquer theorem using quicksort"
      ],
      "metadata": {
        "id": "lbz2S-TdMJtm"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rD_I4kRqMGOy"
      },
      "outputs": [],
      "source": [
        "def quicksort(arr):\n",
        "    n = len(arr)\n",
        "    if n <= 1:\n",
        "        return arr\n",
        "    else:\n",
        "        # Choose a pivot element\n",
        "        pivot = arr.pop()\n",
        "        \n",
        "        # Partition the array into two subarrays\n",
        "        left = []\n",
        "        right = []\n",
        "        for element in arr:\n",
        "            if element <= pivot:\n",
        "                left.append(element)\n",
        "            else:\n",
        "                right.append(element)\n",
        "        \n",
        "        # Recursively sort the subarrays\n",
        "        left_sorted = quicksort(left)\n",
        "        right_sorted = quicksort(right)\n",
        "        \n",
        "        # Combine the results (no combining needed)\n",
        "        return left_sorted + [pivot] + right_sorted"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q2\n",
        "class Graph:\n",
        "    def __init__(self, vertices):\n",
        "        self.V = vertices\n",
        "        self.graph = []\n",
        "\n",
        "    def add_edge(self, u, v, w):\n",
        "        self.graph.append([u, v, w])\n",
        "\n",
        "    # Search function\n",
        "    def find(self, parent, i):\n",
        "        if parent[i] == i:\n",
        "            return i\n",
        "        return self.find(parent, parent[i])\n",
        "\n",
        "    def apply_union(self, parent, rank, x, y):\n",
        "        xroot = self.find(parent, x)\n",
        "        yroot = self.find(parent, y)\n",
        "        if rank[xroot] < rank[yroot]:\n",
        "            parent[xroot] = yroot\n",
        "        elif rank[xroot] > rank[yroot]:\n",
        "            parent[yroot] = xroot\n",
        "        else:\n",
        "            parent[yroot] = xroot\n",
        "            rank[xroot] += 1\n",
        "\n",
        "    #  Applying Kruskal algorithm\n",
        "    def kruskal_algo(self):\n",
        "        result = []\n",
        "        i, e = 0, 0\n",
        "        self.graph = sorted(self.graph, key=lambda item: item[2])\n",
        "        parent = []\n",
        "        rank = []\n",
        "        for node in range(self.V):\n",
        "            parent.append(node)\n",
        "            rank.append(0)\n",
        "        while e < self.V - 1:\n",
        "            u, v, w = self.graph[i]\n",
        "            i = i + 1\n",
        "            x = self.find(parent, u)\n",
        "            y = self.find(parent, v)\n",
        "            if x != y:\n",
        "                e = e + 1\n",
        "                result.append([u, v, w])\n",
        "                self.apply_union(parent, rank, x, y)\n",
        "        for u, v, weight in result:\n",
        "            print(\"%d - %d: %d\" % (u, v, weight))\n",
        "\n",
        "g = Graph(7)\n",
        "g.add_edge(0, 1, 28)\n",
        "g.add_edge(0, 5, 10)\n",
        "g.add_edge(1, 2, 16)\n",
        "g.add_edge(1, 6, 14)\n",
        "g.add_edge(2, 3, 12)\n",
        "g.add_edge(3, 4, 22)\n",
        "g.add_edge(3, 6, 18)\n",
        "g.add_edge(4, 5, 25)\n",
        "g.add_edge(4, 6, 24)\n",
        "\n",
        "g.kruskal_algo()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CiD8KsbKVPOt",
        "outputId": "015e80c2-c0e6-476b-9103-dbb6eef7e05f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 - 5: 10\n",
            "2 - 3: 12\n",
            "1 - 6: 14\n",
            "1 - 2: 16\n",
            "3 - 4: 22\n",
            "4 - 5: 25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q4\n",
        "intervals = [2, 4, 3, 2, 3]\n",
        "n = len(intervals)\n",
        "\n",
        "dp = [0] * n\n",
        "dp[0] = intervals[0]\n",
        "\n",
        "for i in range(1, n):\n",
        "    max_value = 0\n",
        "    for j in range(i):\n",
        "        if intervals[j] <= intervals[i] and dp[j] > max_value:\n",
        "            max_value = dp[j]\n",
        "    dp[i] = max_value + intervals[i]\n",
        "\n",
        "print(max(dp))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aXmcS16Dc4Mj",
        "outputId": "805b0d87-7c87-4aaf-c8b3-8d826f84d2a5"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q5\n",
        "def knapsack(weights, values, W):\n",
        "    n = len(weights)\n",
        "    table = [[0 for j in range(W+1)] for i in range(n+1)]\n",
        "\n",
        "    for i in range(1, n+1):\n",
        "        for j in range(1, W+1):\n",
        "            if weights[i-1] > j:\n",
        "                table[i][j] = table[i-1][j]\n",
        "            else:\n",
        "                table[i][j] = max(table[i-1][j], values[i-1] + table[i-1][j-weights[i-1]])\n",
        "\n",
        "    selected_items = []\n",
        "    i = n\n",
        "    j = W\n",
        "    while i > 0 and j > 0:\n",
        "        if table[i][j] != table[i-1][j]:\n",
        "            selected_items.append(i-1)\n",
        "            j -= weights[i-1]\n",
        "        i -= 1\n",
        "\n",
        "    return (table[n][W], selected_items[::-1])\n"
      ],
      "metadata": {
        "id": "46MW7jr6Z6wl"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "weights = [5, 1, 3, 4, 3]\n",
        "values = [5, 3, 2, 4, 1]\n",
        "W = 10\n",
        "max_value, selected_items = knapsack(weights, values, W)\n",
        "print(\"Maximum value:\", max_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qmoQPCplblR0",
        "outputId": "18244a4a-f5e9-43a0-d2ae-350e84b51c56"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum value: 12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q7\n",
        "def place_base_stations(houses):\n",
        "    # Step 1: Sort the house locations in increasing order.\n",
        "    houses.sort()\n",
        "\n",
        "    # Step 2: Initialize an empty list to store the base station locations.\n",
        "    base_stations = []\n",
        "\n",
        "    # Step 3: Set the current position to the leftmost house location.\n",
        "    current_pos = houses[0]\n",
        "\n",
        "    # Step 4: While there are still uncovered houses, do the following:\n",
        "    while current_pos < houses[-1]:\n",
        "        # Step 4a: Find the furthest house to the right that is within six miles from the current position.\n",
        "        furthest_house = current_pos\n",
        "        for house in houses:\n",
        "            if house - furthest_house > 6:\n",
        "                break\n",
        "            furthest_house = house\n",
        "\n",
        "        # Step 4b: Add a base station at the location of the furthest house.\n",
        "        base_stations.append(furthest_house)\n",
        "\n",
        "        # Step 4c: Set the current position to the furthest house that was covered.\n",
        "        current_pos = furthest_house\n",
        "\n",
        "    # Step 5: Return the list of base station locations.\n",
        "    return base_stations\n"
      ],
      "metadata": {
        "id": "fO0dXDX-nE6r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Q8\n",
        "def find_local_minimum(T):\n",
        "    # Start at the root\n",
        "    v = T\n",
        "    # Loop until we find a local minimum\n",
        "    while True:\n",
        "        # Probe the values of the left and right children\n",
        "        xv = probe(v)\n",
        "        xv_left = probe(v.left)\n",
        "        xv_right = probe(v.right)\n",
        "        # Check if v is a local minimum\n",
        "        if xv < xv_left and xv < xv_right:\n",
        "            return v\n",
        "        # Move towards the smaller child\n",
        "        if xv_left < xv_right:\n",
        "            v = v.left\n",
        "        else:\n",
        "            v = v.right"
      ],
      "metadata": {
        "id": "9J1STpaQfUcg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Q9A\n",
        "# Function to add edges\n",
        "def addEdge(adj, u, v):\n",
        "\tadj[u].append(v)\n",
        "# Function to print adjacency list\n",
        "def adjacencylist(adj, V):\n",
        "\tfor i in range (0, V):\n",
        "\t\tprint(i, \"->\", end=\"\")\n",
        "\t\tfor x in adj[i]:\n",
        "\t\t\tprint(x , \" \", end=\"\")\n",
        "\t\tprint()\n",
        "# Function to initialize the adjacency list\n",
        "def initGraph(V, edges, noOfEdges):\n",
        "\tadj = [0]* 5\n",
        "\tfor i in range(0, len(adj)):\n",
        "\t\tadj[i] = []\n",
        "\t# Traverse edges array and make edges\n",
        "\tfor i in range(0, noOfEdges) :\n",
        "\t\taddEdge(adj, edges[i][0], edges[i][1])\n",
        "\t# Function Call to print adjacency list\n",
        "\tadjacencylist(adj, V)\n",
        "V = 5\n",
        "edges = [[0, 1 ], [0, 2 ], [1, 3 ], [1, 4], [2, 3], [3, 4]]\n",
        "noOfEdges = 6;\n",
        "\n",
        "initGraph(V, edges, noOfEdges)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EH7tO6YfrvS0",
        "outputId": "e93d2bae-56cb-4522-f78e-07e341533e82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 ->1  2  \n",
            "1 ->3  4  \n",
            "2 ->3  \n",
            "3 ->4  \n",
            "4 ->\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q9B\n",
        "# Graph via adjacency list\n",
        "graph = {\n",
        "    \"A\": [\"B\", \"C\"],\n",
        "    \"B\": [\"D\", \"E\"],\n",
        "    \"C\": [\"D\"],\n",
        "    \"D\": [\"E\"],\n",
        "    \"E\": [],\n",
        "}\n",
        "\n",
        "keys = sorted(graph.keys())\n",
        "size = len(keys)\n",
        "\n",
        "matrix = [[0] * size for i in range(size)]\n",
        "\n",
        "# We iterate over the key:value entries in the dictionary first,\n",
        "# then we iterate over the elements within the value\n",
        "for a, b in [(keys.index(a), keys.index(b)) for a, row in graph.items() for b in row]:\n",
        "    # Use 1 to represent if there's an edge\n",
        "    # Use 2 to represent when node meets itself in the matrix (A -> A)\n",
        "    matrix[a][b] = 2 if (a == b) else 1\n",
        "\n",
        "print(matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E795e0e4wr5H",
        "outputId": "8ac9653b-447e-4026-9e15-3cd97f1bdccd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0, 1, 1, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q10\n",
        "from sys import maxsize\n",
        "from itertools import permutations\n",
        "n = 4\n",
        "\n",
        "def travelSalesman (graph, s):\n",
        "  vertex = []\n",
        "  for i in range(n):\n",
        "    if i !=b:\n",
        "      vertex.append(i)\n",
        "\n",
        "  minimum_path =maxsize\n",
        "  next_perm = permutations(vertex)\n",
        "  for i in next_perm:\n",
        "    current_path = 0\n",
        "    a = b\n",
        "    for j in i:\n",
        "      current_path += graph[a][j]\n",
        "      a = j\n",
        "    current_path += graph[a][b]\n",
        "    minimum_path = min(minimum_path, current_path)\n",
        "\n",
        "  return minimum_path\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  graph = [[0,20,15,18], [8,0,25,9],[12,5,0,5],[12,10,30,0]]\n",
        "  b = 0\n",
        "  print(travelSalesman(graph,b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ryy1ErPgRL6z",
        "outputId": "1c766112-eb73-4e32-abbb-c23c9b9be637"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "38\n"
          ]
        }
      ]
    }
  ]
}